# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

# Window dimensions in character columns and lines
# (changes require restart)
window:
  opacity: 0.95
  dimensions:
    columns: 80
    lines: 24

  padding:
    x: 2
    y: 2

  decorations: none
  startup_mode: Maximized

# Adds this many blank pixels of padding around the window
# Units are physical pixels; this is not DPI aware.
# (change requires restart)

# The FreeType rasterizer needs to know the device DPI for best results
# (changes require restart)
dpi:
  x: 96.0
  y: 96.0

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: JetBrainsMono Nerd Font Mono
    # Style can be specified to pick a specific face.
    style: Regular

  # The bold font face
  bold:
    family: JetBrainsMono Nerd Font Mono
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: JetBrainsMono Nerd Font Mono
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 10.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

# Should display the render timer
debug:
  render_timer: false

## Colors (Gruvbox dark)
#colors:
#  # Default colors
#  primary:
#    # hard contrast: background = '#1d2021'
#    background: '#282828'
#    # soft contrast: background = '#32302f'
#    foreground: '#ebdbb2'
#
#  # Normal colors
#  normal:
#    black:   '#282828'
#    red:     '#cc241d'
#    green:   '#98971a'
#    yellow:  '#d79921'
#    blue:    '#458588'
#    magenta: '#b16286'
#    cyan:    '#689d6a'
#    white:   '#a89984'
#
#  # Bright colors
#  bright:
#    black:   '#928374'
#    red:     '#fb4934'
#    green:   '#b8bb26'
#    yellow:  '#fabd2f'
#    blue:    '#83a598'
#    magenta: '#d3869b'
#    cyan:    '#8ec07c'
#    white:   '#ebdbb2'

# Catppuccin!
colors:
  # Default colors
  primary:
    background: '0x1E1E28'
    foreground: '0xD7DAE0'

  # Colors the cursor will use if `custom_cursor_colors` is true
  cursor:
    text: '0x1E1E28'
    cursor: '0xB3E1A3'

  # Normal colors
  normal:
    black:   '0x6E6C7C'
    red:     '0xE28C8C'
    green:   '0xB3E1A3'
    yellow:  '0xEADDA0'
    blue:    '0xA4B9EF'
    magenta: '0xC6AAE8'
    cyan:    '0xF0AFE1'
    white:   '0xD7DAE0'

  # Bright colors
  bright:
    black:   '0x6E6C7C'
    red:     '0xE28C8C'
    green:   '0xB3E1A3'
    yellow:  '0xEADDA0'
    blue:    '0xA4B9EF'
    magenta: '0xC6AAE8'
    cyan:    '0xF0AFE1'
    white:   '0xD7DAE0'

  indexed_colors:
    - { index: 16, color: '0xECBFBD' }
    - { index: 17, color: '0x3E4058' }

bell:
  animation: EaseOutExpo
  duration: 1

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
# key_bindings:

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
